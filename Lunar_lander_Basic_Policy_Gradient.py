import gym 
import torch as T
import torch.nn as nn
import torch.nn.functional as F 
import torch.optim as optim
import numpy as np

# Why ? - Need this below class - to give log prob of action to be taken for a particular environment 

class PolicyNetwork(nn.Module): # inheriting nn.Module's functionalities 
    def __init__(self,lr,input_dims,n_actions): 
        super(PolicyNetwork,self).__init__() # alias to calling the nn.Module's __init__
        
        # fully connected layers for network
        self.fc1 = nn.Linear(*input_dims,128) # *input_dims - it unpacks a list of elements
        self.fc2 = nn.Linear(128,128)
        self.fc3 = nn.Linear(128,n_actions)
        
        self.optimizer = optim.Adam(self.parameters(), lr = lr) # self.parameters() gives an iterator of the above FC layers to iterate over their weights and bases 
       
        # self.parameters is inherited from nn.MNodule, but is used in the initialized layers context 
        self.optimizer = optim.Adam(self.parameters(), lr = lr) # self.parameters() gives an iterator of the above FC layers to iterate over their weights and bases 
        
        
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
        self.to(self.device) #tensors are cuda enabled 

    def forward(self,state):
        x = F.relu(self.fc1(state))
        x = F.relu(self.fc2(x))
        x = self.fc3(x) # dont do any activation - just output logit probabilities, Wo softmax at the end ? 
       
        # By not applying the activation function at the end of the forward method, you maintain the flexibility 
        # to handle the outputs appropriately depending on the downstream tasks, such as action selection or loss 
        # calculation in reinforcement learning algorithms
        
        return x 
    
# The updates for our weights of our neural network will require the log of the probabilities
# generated by the policy so it makes sense to start collecting the memory of the log probs and then choose an action 


class PG_Agent(): # constructor, choose action, log thr reward memory 
    def __init__(self, lr, input_dims, nActions =4, gamma = 0.99): 
        self.gamma = gamma 
        self.lr = lr 
        self.reward_memory = []
        self.action_memory = []
        self.policy = PolicyNetwork(self,lr,input_dims,nActions)
        
    #observation -> tensor state -> NN prob (tensor state)
    def choose_actions(self,observation): 
        # turn the obs to tensor 
        # Change the dimensionality to be compatibel with the deep NN 
        state = T.Tensor([observation]).to(self.policy.device)
        probabilities = F.softmax(self.policy.forward(state)) 
        
        #Why categorical ? - 
        action_probs = T.distributions.Categorical(probabilities)
        
        action = action_probs.sample() # this is in pytorch tensor state 
        log_probs = action_probs.log_prob(action)
        
        self.action_memory.append(log_probs)
        
        #dereferencing the action with action.item()
        return action.item() #returning a python number from a typical tensor
        
    def store_reward(self,reward): 
        self.reward_memory.append(reward)
        
    # no arguments in the learn fucntion as we will sample everything ftrom the agent's memeory     
    def learn(self): 
        
        self.policy.optimizer.zero_grad() # why is this init ? 
        
        G = np.zeros_like(self.agent.reward_memory,dtype=np.float64)
        
        # runs for T steps or 
        for t in range(len(self.reward_memory())): 

            G_sum = 0 
            discount = 1
            
            # as t increases - this loop decreases 
            for k in range(t,len(self.reward_memory())): 
                G_sum += self.reward_memory[k]*discount
                discount *= self.gamma
            G[t] = G_sum
        
        G = T.tensor(G,dtype = T.float).to(self.policy.device())  # why not float 64 ? 
            
        loss = 0 
            # compute loss for respecred reward and (log prob) action value 
        for g,logprob in zip (G,self.action_memory()): 
            loss += -g * logprob
        loss.backward() # compute GD 
        self.policy.optimizer.step() # update the GD based paramters to the NN
        
        self.action_memory = []
        self.reward_memory = []    
                    
 
def plot_learning_curve(x, scores, figure_file):
    running_avg = np.zeros(len(scores))
    for i in range(len(running_avg)):
        running_avg[i] = np.mean(scores[max(0, i-100):(i+1)])
    plt.plot(x, running_avg)
    plt.title('Running average of previous 100 scores')
    plt.savefig(figure_file)
    
     
if __name__ == "__main__": 
    env = gym.make('Lunar')
    n_games = 20000
    
    # env.action_space.n ? does doing .n give number of actions? 
    agent = PG_Agent(lr=0.0001, input_dims = [env.observation_space.shape[0]], nActions = env.action_space.n, gamma = 0.99)         
    
    for i in range(n_games): 
        score = 0
        done = False 
        obs,_ = env.reset()
        
        while not done: 
            
            action = agent.choose_actions(obs) #forward NN called in choose_actions 
            osb_,reward,done,_,info = env.step(action)
            score += reward 
            agent.learn() # Gt and backweard loss calculated for the NN 
            
            
            